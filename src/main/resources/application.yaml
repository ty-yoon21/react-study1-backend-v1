server:
  port: 8080
  servlet:
    context-path: /
jwt:
  secret: A%D*G-KaPdSgVkYp3s6v9y$B&E(H+MbQ
spring:
  servlet:
    multipart:
      max-file-size: 20MB
      max-request-size: 15MB
  jackson:
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: Asia/Seoul
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  #swagger Failed to start bean 'documentationPluginsBootstrapper'; nested exception is java.lang.NullPointerException
  #https://goyunji.tistory.com/137
  jpa:
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        ddl-auto: create #none #create
  redis:
    port: 6379
    host: localhost

mybatis:
  mapper-locations: mapper/*.xml

loging:
  level:
    org.hibernate.type: DEBUT
    org.springframework.cloud: DEGUG
    org.hibernate.SQL: DEBUG #INFO
    org.hibernate.type.descriptor.sql.BasicBinder: DEBUG #sql parameter binding log # INFO
    org.springframework.web.client.RestTemplate: DEBUG
    org.springframework.web: DEBUG
    org.springframework.security: DEBUG
    com.portal.react: DEBUG #INFO

#projects:
#  app:
#    hibernate:
#      property:
#        "[hibernate.dialect]": org.hibernate.dialect.MySQL8Dialect
#        "[hibernate.show_sql]": false
#        "[hibernate.hbm2ddl.auto]": update
#        "[hibernate.cache.use_second_level_cache]": false
#        "[hibernate.cache.use_query_chache]": false
#        "[hibernate.implicit_naming_strategy]": org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
#        "[hibernate.physical_naming_strategy]": com.portal.react.config.NamingStrategy
#    h2:
#      console:
#        enabled: true
#    datasource:
#      hikari:
#        #jdbc-url: jdbc:h2:~/test-db
#        url: jdbc:h2:~/test-db
#        driver-class-name: org.h2.Driver
#        username: sa
#        password: 1234

---

spring:
  profiles: default #local

  main:
    allow-bean-definition-overriding: true

  kafka:
    consumer:
      bootstrap-servers: localhost:9092
      group-id: kafkaCousumerTestGroup
      # Kafka 서버에 초기 offset이 없거나, 서버에 현재 offset이 더 이상 존재하지 않을 경우 수행할 작업을 설정
      # latest: 가장 최근에 생산된 메시지로 offeset reset
      # earliest: 가장 오래된 메시지로 offeset reset
      # none: offset 정보가 없으면 Exception 발생
      auto-offset-reset: latest #earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      # producer bootstrap servers가 따로 존재하면 설정
      bootstrap-servers: localhost:9092
      # 데이터를 보낼 때, key/value를 직렬화
      # JSON 데이터를 보낼 것이라면 JsonDeserializer
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  redis:
    port: 6379
    host: localhost

projects:
  app:
    hibernate:
      property:
        "[hibernate.dialect]": org.hibernate.dialect.MySQL8Dialect
        "[hibernate.show_sql]": false
        "[hibernate.hbm2ddl.auto]": create-drop #none #update
        "[hibernate.cache.use_second_level_cache]": false
        "[hibernate.cache.use_query_chache]": false
        "[hibernate.implicit_naming_strategy]": org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
        "[hibernate.physical_naming_strategy]": com.portal.react.config.NamingStrategy
#create : JPA가 DB와 상호작용할 때 기존에 있던 스키마(테이블)을 삭제하고 새로 만드는 것을 뜻합니다.
#create-drop : JPA 종료 시점에 기존에 있었던 테이블을 삭제합니다.
#update : JPA에 의해 변경된 부분만 반영합니다.
#validate : 엔티티와 테이블이 정상 매핑되어 있는지만 검증합니다.
#none : 초기화 동작을 사용하지 않습니다.
    h2:
      console:
        enabled: true
        path: h2-console
    datasource:
      hikari:
        jdbc-url: jdbc:h2:~/test-db;MODE=MySQL
        #url: jdbc:h2:~/test-db
        driver-class-name: org.h2.Driver
        username: sa
        password: 1234


#  h2:
#    console:
#      enabled: true
#  datasource:
#    driver-class-name: org.h2.Driver           ## local mode
#    url: jdbc:h2:mem:userdb;DB_CLOSE_DELAY=-1
#    username: sa
#    password:


#  h2:
#    console:
#      enabled: true
#      path: /h2-console
#  datasource:
#    hikari:
#      driver-class-name: org.h2.Driver
#      ## local mode
#      #url: jdbc:h2:mem:userdb;DB_CLOSE_DELAY=-1
#      jdbc-url: jdbc:h2:tcp://localhost/~/todo
#      ## server mode
#      #jdbc-url: jdbc:h2:./data/testdb
#
#      # 또는 jdbc:h2:tcp://localhost:9092/./data/testdb
#      username: sa
#      password:
---

spring:
  profiles: dev #development

---
spring:
  profiles: prod #production